---
- name: Set facts
  ansible.builtin.set_fact:
    go_archive_full_name: "{{ go_lang_version }}.linux-{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}.tar.gz"
    go_full_download_url: "{{ go_lang_base_url }}/{{ go_lang_version }}.linux-{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}.tar.gz"


- name: Create temporary directory
  block:
    - name: Remove the folder if it exists
      ansible.builtin.file:
        path: "{{ go_lang_temporary_folder_path }}"
        state: absent

    - name: Create the folder
      ansible.builtin.file:
        path: "{{ go_lang_temporary_folder_path }}"
        mode: '755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        state: directory


- name: Register the current Go version (if any)
  ansible.builtin.command: /usr/local/go/bin/go version
  ignore_errors: true
  register: go_actual_version
  changed_when: false


- name: Remove old installation of Go
  ansible.builtin.file:
    path: /usr/local/go
    state: absent
  when: go_actual_version or go_lang_version not in go_actual_version.stdout


- name: Install go
  when: go_actual_version or go_lang_version not in go_actual_version.stdout
  block:
    - name: Download the Go tarball
      ansible.builtin.get_url:
        checksum: "{{ go_lang_checksum }}"
        url: "{{ go_full_download_url }}"
        dest: "{{ go_lang_temporary_folder_path }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "660"

    - name: Extract go archive
      ansible.builtin.unarchive:
        dest: /usr/local
        group: root
        mode: "755"
        owner: root
        remote_src: true
        src: "{{ go_lang_temporary_folder_path }}/{{ go_archive_full_name }}"

    - name: Add go path
      ansible.builtin.copy:
        dest: /etc/profile.d/go-bin.sh
        mode: "644"
        owner: root
        group: root
        content: |
          export PATH=$PATH:/usr/local/go/bin
