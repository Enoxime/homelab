---
- name: "Generate private keys"
  community.crypto.openssl_privatekey:
    backup: "{{ certificates.config.backup | default(certificate.config.backup) }}"
    curve: "{{ cert.private_key.curve | default(certificates.config.private_key.curve) | default(certificate.private_key.curve, true) }}"
    group: "{{ certificates.config.group | default(certificate.group) }}"
    mode: "400"
    owner: "{{ certificates.config.owner | default(certificate.owner) }}"
    passphrase: "{{ cert.private_key.passphrase | default(omit) }}"
    path: "{{ certificates.config.path | default(certificate.config.path) }}/{{ cert.name | default(certificate.config.name) }}/{{ cert.name | default(certificate.config.name) }}.key"
    size: "{{ cert.private_key.size | default(certificates.config.private_key.size) | default(certificate.private_key.size) }}"
    type: "{{ cert.private_key.type | default(certificates.config.private_key.type) | default(certificate.private_key.type) }}"

- name: "Generate CSR"
  community.crypto.openssl_csr:
    backup: "{{ certificates.config.backup | default(certificate.config.backup) }}"
    common_name: "{{ cert.common_name | default(certificate.common_name) }}"
    country_name: "{{ certificates.config.country_name | default(certificate.config.country_name) }}"
    group: "{{ certificates.config.group | default(certificate.group) }}"
    mode: "400"
    organization_name: "{{ cert.organization_name | default(certificates.config.organization_name) | default(certificate.config.organization_name) }}"
    organizational_unit_name: "{{ cert.organizational_unit_name | default(certificates.config.organizational_unit_name) | default(certificate.config.organizational_unit_name) }}"
    owner: "{{ certificates.config.owner | default(certificate.owner) }}"
    path: "{{ certificates.config.path | default(certificate.config.path) }}/{{ cert.name | default(certificate.config.name) }}/{{ cert.name | default(certificate.config.name) }}.csr"
    privatekey_passphrase: "{{ cert.private_key.passphrase | default(omit) }}"
    privatekey_path: "{{ certificates.config.path | default(certificate.config.path) }}/{{ cert.name | default(certificate.config.name) }}/{{ cert.name | default(certificate.config.name) }}.key"
    state_or_province_name: "{{ certificates.config.state_or_province_name | default(certificate.config.state_or_province_name) }}"
    subject_alt_name: "{{ cert.subject_alt_name | default(certificate.subject_alt_name) }}"

- name: "Sign the CSR"
  community.crypto.x509_certificate:
    backup: "{{ certificates.config.backup | default(certificate.config.backup) }}"
    csr_path: "{{ certificates.config.path | default(certificate.config.path) }}/{{ cert.name | default(certificate.config.name) }}/{{ cert.name | default(certificate.config.name) }}.csr"
    group: "{{ certificates.config.group | default(certificate.group) }}"
    mode: "400"
    ownca_not_after: "+365d"
    ownca_path: "{{ certificates.config.path | default(certificate.config.path) }}/{{ certificates.ca.name | default(certificate.ca.name) }}.ca.crt"
    ownca_privatekey_passphrase: "{{ certificates.ca.passphrase | default(omit) }}"
    ownca_privatekey_path: "{{ certificates.config.path | default(certificate.config.path) }}/{{ certificates.ca.name | default(certificate.ca.name) }}.ca.key"
    owner: "{{ certificates.config.owner | default(certificate.owner) }}"
    path: "{{ certificates.config.path | default(certificate.config.path) }}/{{ cert.name | default(certificate.config.name) }}/{{ cert.name | default(certificate.config.name) }}.crt"
    privatekey_passphrase: "{{ cert.private_key.passphrase | default(omit) }}"
    privatekey_path: "{{ certificates.config.path | default(certificate.config.path) }}/{{ cert.name | default(certificate.config.name) }}/{{ cert.name | default(certificate.config.name) }}.key"
    provider: "ownca"

- name: "Get certificate content"
  ansible.builtin.slurp:
    src: "{{ certificates.config.path | default(certificate.config.path) }}/{{ cert.name | default(certificate.config.name) }}/{{ cert.name | default(certificate.config.name) }}.crt"
  register: certificate_path

- name: "Get ca certificate content"
  ansible.builtin.slurp:
    src: "{{ certificates.config.path | default(certificate.config.path) }}/{{ certificates.ca.name | default(certificate.ca.name) }}.ca.crt"
  register: ca_certificate_path

- name: "Create cert bundle"
  ansible.builtin.copy:
    content: |
      {{ certificate_path['content'] | b64decode }}{{ ca_certificate_path['content'] | b64decode }}
    dest: "{{ certificates.config.path | default(certificate.config.path) }}/{{ cert.name | default(certificate.config.name) }}/{{ cert.name | default(certificate.config.name) }}.bundle.crt"
    group: "{{ certificates.config.group | default(certificate.group) }}"
    mode: "400"
    owner: "{{ certificates.config.owner | default(certificate.owner) }}"