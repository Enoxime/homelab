---
- name: Install Infinite Noise TRNG
  ansible.builtin.include_tasks: trng.yaml
  when:
    - cas.trng.enabled | default(false)


- name: Set variables
  ansible.builtin.set_fact:
    cas_arch: >-
      {% if ansible_architecture == 'x86_64' %}amd64{%
      elif ansible_architecture == 'aarch64' %}arm64{%
      else %}{{ ansible_architecture }}{% endif %}


- name: Install step-cli
  block:
    - name: Step-cli => Register latest step-cli release
      ansible.builtin.uri:
        method: GET
        url: https://api.github.com/repos/smallstep/cli/releases/latest
      register: step_cli_release

    - name: Step-cli => Install step-cli
      ansible.builtin.apt:
        deb: "{{ step_cli_release.json | community.general.json_query(step_cli_json_query) }}"
      vars:
        step_cli_json_query: >-
          assets[?starts_with(name, 'step-cli_{{ step_cli_release.json.tag_name[1:] }}') &&
          ends_with(name, '{{ cas_arch }}.deb')].browser_download_url | [0]


- name: Install step-ca
  block:
    - name: Step-ca => Register latest step-ca release
      ansible.builtin.uri:
        method: GET
        url: https://api.github.com/repos/smallstep/certificates/releases/latest
      register: step_ca_release

    - name: Step-ca => Install step-ca as deb package
      ansible.builtin.apt:
        deb: >-
          https://github.com/smallstep/certificates/releases/download/{{
          step_ca_release.json.tag_name }}/step-ca_{{
          step_ca_release.json.tag_name[1:] }}_{{ cas_arch }}.deb
      when:
        - not (cas.yubikey.enabled | default(false))

    - name: Step-ca => Build and install step-ca with yubikey support
      when:
        - cas.yubikey.enabled | default(false)
      block:
        - name: Step-ca => Create a temporary directory
          block:
            - name: Remove the directory if it exists
              ansible.builtin.file:
                path: "{{ certificate_authority_server_temporary_folder_path }}"
                state: absent

            - name: Step-ca => Create the directory
              ansible.builtin.file:
                path: "{{ certificate_authority_server_temporary_folder_path }}/step-ca"
                mode: '755'
                owner: "{{ ansible_user }}"
                group: "{{ ansible_user }}"
                state: directory
                recurse: true

        - name: Step-ca => Download the step-ca tarball
          ansible.builtin.get_url:
            url: "{{ step_ca_release.json.tarball_url }}"
            dest: "{{ certificate_authority_server_temporary_folder_path }}/step-ca.tar.gz"
            mode: "644"
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"

        - name: Step-ca => Decompress step-ca tarball
          ansible.builtin.unarchive:
            src: "{{ certificate_authority_server_temporary_folder_path }}/step-ca.tar.gz"
            remote_src: true
            dest: "{{ certificate_authority_server_temporary_folder_path }}/step-ca"
            mode: "755"
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
            extra_opts:
              - --strip-components=1

        - name: Step-ca => Build step-ca binary
          block:
            - name: Step-ca => Bootstrap phase
              community.general.make:
                chdir: "{{ certificate_authority_server_temporary_folder_path }}/step-ca"
                file: Makefile
                target: bootstrap
              environment:
                PATH: /usr/local/go/bin:{{ ansible_env.PATH }}
              become: true
              become_user: "{{ ansible_user }}"

            - name: Step-ca => Build phase
              community.general.make:
                chdir: "{{ certificate_authority_server_temporary_folder_path }}/step-ca"
                file: Makefile
                target: build
                params:
                  GO_ENVS: CGO_ENABLED=1
              environment:
                PATH: /usr/local/go/bin:{{ ansible_env.PATH }}
              become: true
              become_user: "{{ ansible_user }}"

            - name: Step-ca => Install phase
              ansible.builtin.copy:
                dest: /usr/local/bin/step-ca
                mode: "755"
                owner: root
                group: root
                remote_src: true
                src: "{{ certificate_authority_server_temporary_folder_path }}/step-ca/bin/step-ca"

            - name: Step-ca => Ensure capabilities to listen for port 443 as standard user
              community.general.capabilities:
                capability: CAP_NET_BIND_SERVICE=+eip
                path: /usr/local/bin/step-ca
                state: present


- name: Install step-kms-plugin
  when:
    - cas.yubikey.enabled | default(false)
  ansible.builtin.command: /usr/local/go/bin/go install github.com/smallstep/step-kms-plugin@latest
  environment:
    GOPATH: /usr/local
  register: return_code
  changed_when: return_code.rc == 0
  failed_when: return_code.rc != 0


- name: Generate PKIs
  ansible.builtin.include_tasks: pki.yaml


- name: Yubikey
  ansible.builtin.include_tasks: yubikey.yaml
  when:
    - cas.yubikey.enabled | default(false)


- name: Refine configuration if needed
  when:
    - cas.config.authority | default(false)
  block:
    - name: Retrieve the configuration
      ansible.builtin.slurp:
        src: "{{ cas.mount.path }}/ca/config/ca.json"
      register: cas_authority_remote_config

    - name: Register the config as an object
      ansible.builtin.set_fact:
        cas_authority_config: "{{ cas_authority_remote_config.content | b64decode | from_json | combine(cas.config, recursive=true) }}"

    - name: Rewrite the remote config
      ansible.builtin.copy:
        dest: "{{ cas.mount.path }}/ca/config/ca.json"
        mode: "600"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        content: "{{ cas_authority_config | to_nice_json(indent=2) }}"


- name: Install step-ca.service
  ansible.builtin.template:
    src: step-ca.service.jinja
    dest: /etc/systemd/system/step-ca.service
    mode: "644"
    owner: root
    group: root


- name: Restart the instance to apply changes
  ansible.builtin.reboot:


- name: Enable and start step-ca.service
  ansible.builtin.service:
    name: step-ca.service
    state: started
    enabled: true
