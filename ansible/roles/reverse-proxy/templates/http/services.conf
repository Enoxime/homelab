{% for service in services %}

### {{ service.name }}'s http config
server {
  # TODO: Add proxy_cache, proxy_cache_use_stale and more caching options
  listen {% if service.listen is defined %}{{ service.listen }}:{% endif %}80;
  server_name {{ service.main_domain_name }}{% if service.domain_names is defined %} {% for domain in service.domain_names %}{{ domain }}{% if not loop.last %} {% endif %}{% endfor %}{% endif %};
{%  if service.internal_network is defined %}
{%    for internal_network in service.internal_network %}

  # Allow traffic from {{ internal_network }}
  include /etc/nginx/internal_network/{{ internal_network }}.conf;
{%    endfor %}
{%  endif %}

  location / {
      return 301 https://$host$request_uri;
  }
}

### {{ service.name }}'s https config
server {
  listen {% if service.listen is defined %}{{ service.listen }}:{% endif %}443 ssl http2;
  # listen 443 http3 reuseport;
  server_name {{ service.main_domain_name }}{% if service.domain_names is defined %} {% for domain in service.domain_names %}{{ domain }}{% if not loop.last %} {% endif %}{% endfor %}{% endif %};

  # logging
  # access_log /var/log/nginx/access.log;
  access_log /var/log/nginx/access.log;
{%  if service.internal_network is defined %}
{%    for internal_network in service.internal_network %}

  # Allow traffic from {{ internal_network }}
  include /etc/nginx/internal_network/{{ internal_network }}.conf;
{%    endfor %}
{%  endif %}
{%  if service.ssl is defined %}
{%    if service.ssl.type == "manual" %}


  # Certificate config
{%      if service.ssl.cert_name is defined %}

  ssl_certificate /etc/nginx/certs/{{ service.ssl.cert_name }}/{{ service.ssl.cert_name }}.bundle.crt;
  ssl_certificate_key /etc/nginx/certs/{{ service.ssl.cert_name }}/{{ service.ssl.cert_name }}.key;
{%      endif %}
{%    elif service.ssl.type == "letsencrypt" %}
{%      for lets in letsencrypt_cert_exists.results %}
{%        if lets.service.name == service.name and lets.stat.exists %}

  ssl_certificate /etc/letsencrypt/live/{{ service.main_domain_name }}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/{{ service.main_domain_name }}/privkey.pem;
{%        endif %}
{%      endfor %}
{%    else %}

  ssl_certificate /etc/nginx/certs/localhost/localhost.bundle.crt;
  ssl_certificate_key /etc/nginx/certs/localhost/localhost.key;
{%    endif %}
{%  endif %}

  # TODO: Setup security headers
  # # security headers
  # add_header X-Frame-Options           "SAMEORIGIN" always;
  # add_header X-XSS-Protection          "1; mode=block" always;
  # add_header X-Content-Type-Options    "nosniff" always;
  # add_header Referrer-Policy           "no-referrer-when-downgrade" always;
  # add_header Content-Security-Policy   "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
  # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

  # TODO: Create a dhparam for each vhosts

  add_header Strict-Transport-Security "max-age=15552000" always; # Three months
{%  if service.unauthorized_method is defined %}

  # restrict methods
  # if ($request_method !~ ^(GET|POST|PUT|DELETE)$) {
  #     return '405';
  # }
  if ($request_method !~ ^({% for method in service.unauthorized_method %}{{ method }}{% if not loop.last %}|{% endif %}{% endfor %})$) {
    return '405';
  }
{%  endif %}

  location / {
{%  if service.to is defined %}
    set $upstream {{ service.to.address }}{% if service.to.port is defined %}:{{ service.to.port }}{% endif %};
    proxy_pass {{ service.to.proto | default("http") }}://$upstream;
{%  endif %}
{%  if service.upstream is defined %}
    proxy_pass http://{{ service.upstream }};
{%  endif %}
{%  if service.geo is defined %}
{%    for geo in service.geo %}
        if (${{ geo.name }}) {
{%        if service.proxy_bind is defined %}
{%          set proxy_bind = service.proxy_bind %}
{%          filter indent(width=4) %}
{%            include 'http/proxy_bind.conf' %}
{%          endfilter %}
{%        else %}
      proxy_pass http://{{ geo.upstream }};
{%      endif %}
    }
{%    endfor %}
{%  else %}
{%    if service.proxy_bind is defined %}
{%      set proxy_bind = service.proxy_bind %}
{%      filter indent(width=4) %}
{%        include 'http/proxy_bind.conf' %}
{%      endfilter %}
{%    endif %}
{%  endif %}

  }
}
{% endfor %}