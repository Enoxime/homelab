---
home:
  hosts:
    reverseproxy:
      user_data:
        users:
          - name: reverseproxy
            primary_group: users
            shell: "/bin/bash"
            sudo: "ALL=(ALL) NOPASSWD:ALL"
            groups:
              - users
              - adm
              - netdev
            ssh_keys:
              - "{{ ssh_key }}"
          - name: k3s
            primary_group: users
            shell: "/bin/bash"
            sudo: "ALL=(ALL) NOPASSWD:ALL"
            groups:
              - users
              - adm
              - netdev
            ssh_keys:
              - "{{ k3s_ssh_key }}"
        pkg_update: yes
        pkg_upgrade: yes
        power_state:
          mode: "reboot"
      network_config:
        ethernet:
          dhcp4: no
          addresses:
            - "{{ network.zones.home.hosts.reverseproxy.guest | ansible.netcommon.ipaddr('host') }}"
          gateway4: "{{ network.zones.home.lans.guest.gateway }}"
          nameservers: "{{ [network.zones.home.lans.guest.gateway, network.nameservers.block_malware] | flatten }}"
        vlans:
          - name: "main"
            id: 10
            dhcp4: no
            addresses:
              - "{{ network.zones.home.hosts.reverseproxy.main | ansible.netcommon.ipaddr('host') }}"
            gateway4: "{{ network.zones.home.lans.main.gateway }}"
            nameservers: "{{ [network.zones.home.lans.main.gateway, network.nameservers.block_malware] | flatten }}"
            macaddress: "{{ 'DC:A6:32' | community.general.random_mac() }}"
          - name: "work"
            id: 20
            dhcp4: no
            addresses:
              - "{{ network.zones.home.hosts.reverseproxy.work | ansible.netcommon.ipaddr('host') }}"
            gateway4: "{{ network.zones.home.lans.work.gateway }}"
            nameservers: "{{ [network.zones.home.lans.work.gateway, network.nameservers.block_malware] | flatten }}"
            macaddress: "{{ 'DC:A6:32' | community.general.random_mac() }}"
          - name: "k8s"
            id: 30
            dhcp4: no
            addresses:
              - "{{ network.zones.home.hosts.reverseproxy.k8s | ansible.netcommon.ipaddr('host') }}"
            gateway4: "{{ network.zones.home.lans.k8s.gateway }}"
            nameservers: "{{ [network.zones.home.lans.k8s.gateway, network.nameservers.block_malware] | flatten }}"
            macaddress: "{{ 'DC:A6:32' | community.general.random_mac() }}"
          - name: "lab"
            id: 40
            dhcp4: no
            addresses:
              - "{{ network.zones.home.hosts.reverseproxy.lab | ansible.netcommon.ipaddr('host') }}"
              - "{{ network.zones.home.hosts.reverseproxy.external | ansible.netcommon.ipaddr('host') }}"
            gateway4: "{{ network.zones.home.lans.lab.gateway }}"
            nameservers: "{{ [network.zones.home.lans.lab.gateway, network.nameservers.block_malware] | flatten }}"
            macaddress: "{{ 'DC:A6:32' | community.general.random_mac() }}"

      tmp_size: "512M"
      dns_53: "{{ network.nameservers.block_malware[0] }}"

      hosts_file:
        - ip: "127.0.0.1"
          names:
            - "reverseproxy"
            - "reverseproxy.lan"
            - "k3s.lan"
            - "k3s-master-a"

      sshd_config:
        permit_root_login: "no"
        password_authentication: "no"
        x11_forwarding: "no"


      fail2ban_config:
        ignore_ip:
          - "127.0.0.1/32"
          - "::1"
        bantime: "{{ fail2ban_config_template.bantime }}"
        findtime: "{{ fail2ban_config_template.findtime }}"
        maxretry: "{{ fail2ban_config_template.maxretry }}"
        filters:
          - name: "nginx-noscript"
            description: "Block IPs trying to execute scripts such as .php, .pl, .exe and other funny scripts."
            failregex: '^<HOST> -.*GET.*(\.asp|\.exe|\.pl|\.cgi|\scgi|\.py)'
          - name: "nginx-badbots"
            description: "Ban very bad bot"
            failregex: '^<HOST> -.*"(GET|POST|HEAD).*HTTP.*"(?:%(badbots)s|%(badbotscustom)s)"$'
            options:
              badbotscustom: 'EmailCollector|WebEMailExtrac|TrackBack/1\.02|sogou music spider'
              badbots: 'Atomic_Email_Hunter/4\.0|atSpider/1\.0|autoemailspider|bwh3_user_agent|China Local Browse 2\.6|ContactBot/0\.2|ContentSmartz|DataCha0s/2\.0|DBrowse 1\.4b|DBrowse 1\.4d|Demo Bot DOT 16b|Demo Bot Z 16b|DSurf15a 01|DSurf15a 71|DSurf15a 81|DSurf15a VA|EBrowse 1\.4b|Educate Search VxB|EmailSiphon|EmailSpider|EmailWolf 1\.00|ESurf15a 15|ExtractorPro|Franklin Locator 1\.8|FSurf15a 01|Full Web Bot 0416B|Full Web Bot 0516B|Full Web Bot 2816B|Guestbook Auto Submitter|Industry Program 1\.0\.x|ISC Systems iRc Search 2\.1|IUPUI Research Bot v 1\.9a|LARBIN-EXPERIMENTAL \(efp@gmx\.net\)|LetsCrawl\.com/1\.0 \+http\://letscrawl\.com/|Lincoln State Web Browser|LMQueueBot/0\.2|LWP\:\:Simple/5\.803|Mac Finder 1\.0\.xx|MFC Foundation Class Library 4\.0|Microsoft URL Control - 6\.00\.8xxx|Missauga Locate 1\.0\.0|Missigua Locator 1\.9|Missouri College Browse|Mizzu Labs 2\.2|Mo College 1\.9|MVAClient|Mozilla/2\.0 \(compatible; NEWT ActiveX; Win32\)|Mozilla/3\.0 \(compatible; Indy Library\)|Mozilla/3\.0 \(compatible; scan4mail \(advanced version\) http\://www\.peterspages\.net/?scan4mail\)|Mozilla/4\.0 \(compatible; Advanced Email Extractor v2\.xx\)|Mozilla/4\.0 \(compatible; Iplexx Spider/1\.0 http\://www\.iplexx\.at\)|Mozilla/4\.0 \(compatible; MSIE 5\.0; Windows NT; DigExt; DTS Agent|Mozilla/4\.0 efp@gmx\.net|Mozilla/5\.0 \(Version\: xxxx Type\:xx\)|NameOfAgent \(CMS Spider\)|NASA Search 1\.0|Nsauditor/1\.x|PBrowse 1\.4b|PEval 1\.4b|Poirot|Port Huron Labs|Production Bot 0116B|Production Bot 2016B|Production Bot DOT 3016B|Program Shareware 1\.0\.2|PSurf15a 11|PSurf15a 51|PSurf15a VA|psycheclone|RSurf15a 41|RSurf15a 51|RSurf15a 81|searchbot admin@google\.com|ShablastBot 1\.0|snap\.com beta crawler v0|Snapbot/1\.0|Snapbot/1\.0 \(Snap Shots&#44; \+http\://www\.snap\.com\)|sogou develop spider|Sogou Orion spider/3\.0\(\+http\://www\.sogou\.com/docs/help/webmasters\.htm#07\)|sogou spider|Sogou web spider/3\.0\(\+http\://www\.sogou\.com/docs/help/webmasters\.htm#07\)|sohu agent|SSurf15a 11 |TSurf15a 11|Under the Rainbow 2\.2|User-Agent\: Mozilla/4\.0 \(compatible; MSIE 6\.0; Windows NT 5\.1\)|VadixBot|WebVulnCrawl\.unknown/1\.0 libwww-perl/5\.803|Wells Search II|WEP Search 00'
          - name: "nginx-x00"
            description: 'Block potentially malicious x03\x00 requests'
            failregex: '^{"log":"<HOST> .* .*\\x.*$'
          - name: "nginx-nohome"
            description: "Ban request to home users directory"
            failregex: '^<HOST> -.*GET .*/~.*'
          - name: "nginx-deny"
            failregex: '^ \[error\] \d+#\d+: \*\d+ (access forbidden by rule), client: <HOST>, server: \S*, request: "\S+ \S+ HTTP\/\d+\.\d+", host: "\S+"(?:, referrer: "\S+")?\s*$'
            options:
              datepattern: '{^LN-BEG}'
          - name: "log4j-jndi"
            description: "Log4j security check"
            failregex: '(?i)^<HOST> .* ".*\$.*(7B|\{).*(lower:)?.*j.*n.*d.*i.*:.*".*?$'
        jails:
          - name: "sshd"
            port: "ssh"
            logpath: "%(sshd_log)s"
            backend: "%(sshd_backend)s"
            options:
              mode: "aggressive"
          - name: "nginx-botsearch"
            port: "http,https"
            logpath: "/var/log/nginx/access.log"
          - description: "Block IPs trying to execute scripts such as .php, .pl, .exe and other funny scripts."
            name: "nginx-noscript"
            port: "http,https"
            logpath: "/var/log/nginx/access.log"
          - description: "Ban every bad bot"
            name: "nginx-badbots"
            port: "http,https"
            logpath: "/var/log/nginx/access.log"
          - description: 'Block potentially malicious x03\x00 requests'
            name: "nginx-x00"
            port: "http,https"
            logpath: "/var/log/nginx/access.log"
          - description: "Ban request to home users directory"
            name: "nginx-nohome"
            port: "http,https"
            logpath: "/var/log/nginx/access.log"
          - name: "nginx-deny"
            port: "http,https"
            logpath: "/var/log/nginx/access.log"
          - name: "log4j-jndi"
            port: "http,https"
            logpath: "/var/log/nginx/access.log"


      ufw_ipv6: "no"
      ufw_default_input_policy: DROP
      ufw_default_output_policy: ACCEPT
      ufw_default_forward_policy: ACCEPT
      ufw_default_application_policy: SKIP
      ufw_logging: "off"
      ufw_state: "enabled"

      ufw_rules:
        - comment: "Allow NTP sync"
          to_port: "123"
          direction: "out"
          proto: "udp"
          rule: "allow"

        - comment: "Allow HTTP out"
          to_port: "80"
          direction: "out"
          proto: "tcp"
          rule: "allow"

        - comment: "Allow HTTPS out"
          to_port: "443"
          direction: "out"
          proto: "tcp"
          rule: "allow"

        - comment: "Allow ssh from Lab"
          from_ip: "{{ network.zones.home.lans.lab.cidr }}"
          to_port: "22"
          direction: "in"
          proto: "tcp"
          rule: "allow"

        - comment: "Allow k8s to k8s in"
          from_ip: "{{ network.zones.home.lans.k8s.cidr }}"
          direction: "in"
          rule: "allow"

        - comment: "Allow k8s to k8s out"
          to_ip: "{{ network.zones.home.lans.k8s.cidr }}"
          direction: "out"
          rule: "allow"

        - comment: "Allow lab to port 6443 in k8s"
          from_ip: "{{ network.zones.home.lans.lab.cidr }}"
          from_port: 6443
          to_ip: "{{ network.zones.home.lans.k8s.cidr }}"
          to_port: 6443

        - comment: "Allow DNS queries from guest"
          from_ip: "{{ network.zones.home.lans.guest.cidr }}"
          to_ip: "{{ network.zones.home.hosts.reverseproxy.guest | ansible.netcommon.ipaddr('host') }}"
          to_port: "53"
          direction: "in"
          proto: "udp"
          rule: "allow"

        - comment: "Allow ask DNS from guest"
          from_ip: "{{ network.zones.home.hosts.reverseproxy.guest | ansible.netcommon.ipaddr('host') }}"
          to_port: "53"
          direction: "out"
          proto: "udp"
          rule: "allow"

        - comment: "Allow DNS queries from main"
          from_ip: "{{ network.zones.home.lans.main.cidr }}"
          to_ip: "{{ network.zones.home.hosts.reverseproxy.main | ansible.netcommon.ipaddr('host') }}"
          to_port: "53"
          direction: "in"
          proto: "udp"
          rule: "allow"

        - comment: "Allow ask DNS from main"
          from_ip: "{{ network.zones.home.hosts.reverseproxy.main | ansible.netcommon.ipaddr('host') }}"
          to_port: "53"
          direction: "out"
          proto: "udp"
          rule: "allow"

        - comment: "Allow DNS queries from work"
          from_ip: "{{ network.zones.home.lans.work.cidr }}"
          to_ip: "{{ network.zones.home.hosts.reverseproxy.work | ansible.netcommon.ipaddr('host') }}"
          to_port: "53"
          direction: "in"
          proto: "udp"
          rule: "allow"

        - comment: "Allow ask DNS from work"
          from_ip: "{{ network.zones.home.hosts.reverseproxy.work | ansible.netcommon.ipaddr('host') }}"
          to_port: "53"
          direction: "out"
          proto: "udp"
          rule: "allow"

        - comment: "Allow DNS queries from lab"
          from_ip: "{{ network.zones.home.lans.lab.cidr }}"
          to_ip: "{{ network.zones.home.hosts.reverseproxy.lab | ansible.netcommon.ipaddr('host') }}"
          to_port: "53"
          direction: "in"
          proto: "udp"
          rule: "allow"

        - comment: "Allow ask DNS from lab"
          from_ip: "{{ network.zones.home.hosts.reverseproxy.lab | ansible.netcommon.ipaddr('host') }}"
          to_port: "53"
          direction: "out"
          proto: "udp"
          rule: "allow"

        - comment: "Allow http from main"
          from_ip: "{{ network.zones.home.lans.main.cidr }}"
          to_ip: "{{ network.zones.home.hosts.reverseproxy.main | ansible.netcommon.ipaddr('host') }}"
          to_port: "80"
          direction: "in"
          proto: "tcp"
          rule: "allow"

        - comment: "Allow https from main"
          from_ip: "{{ network.zones.home.lans.main.cidr }}"
          to_ip: "{{ network.zones.home.hosts.reverseproxy.main | ansible.netcommon.ipaddr('host') }}"
          to_port: "443"
          direction: "in"
          proto: "tcp"
          rule: "allow"

        - comment: "Allow http from lab"
          from_ip: "{{ network.zones.home.lans.lab.cidr }}"
          to_ip: "{{ network.zones.home.hosts.reverseproxy.lab | ansible.netcommon.ipaddr('host') }}"
          to_port: "80"
          direction: "in"
          proto: "tcp"
          rule: "allow"

        - comment: "Allow https from lab"
          from_ip: "{{ network.zones.home.lans.lab.cidr }}"
          to_ip: "{{ network.zones.home.hosts.reverseproxy.lab | ansible.netcommon.ipaddr('host') }}"
          to_port: "443"
          direction: "in"
          proto: "tcp"
          rule: "allow"

        - comment: "Allow http from work"
          from_ip: "{{ network.zones.home.lans.work.cidr }}"
          to_ip: "{{ network.zones.home.hosts.reverseproxy.work | ansible.netcommon.ipaddr('host') }}"
          to_port: "80"
          direction: "in"
          proto: "tcp"
          rule: "allow"

        - comment: "Allow https from work"
          from_ip: "{{ network.zones.home.lans.work.cidr }}"
          to_ip: "{{ network.zones.home.hosts.reverseproxy.work | ansible.netcommon.ipaddr('host') }}"
          to_port: "443"
          direction: "in"
          proto: "tcp"
          rule: "allow"

        - comment: "Allow to connect to CUPs admin"
          from_ip: "{{ network.zones.home.hosts.reverseproxy.lab | ansible.netcommon.ipaddr('host') }}"
          to_ip: "{{ network.zones.home.hosts.print.lab | ansible.netcommon.ipaddr('address') }}"
          to_port: "631"
          direction: "out"
          proto: "tcp"
          rule: "allow"

        - comment: "Allow access to Kubernetes API server"
          from_ip: "{{ network.zones.home.lans.lab.cidr }}"
          to_ip: "{{ network.zones.home.lans.k8s.cidr }}"
          to_port: "6443"
          direction: "in"
          proto: "tcp"
          rule: "allow"

        - comment: "Allow http from router"
          to_port: "80"
          direction: "in"
          rule: "allow"

        - comment: "Allow https from router"
          to_port: "443"
          direction: "in"
          rule: "allow"

      certificates:
        ca:
          curve: "secp256r1"
          name: "home.lan"
          size: 4096
          # X25519 is not supported rigth now by the module
          # type: "X25519"
          type: "RSA"
        config:
          owner: "root"
          group: "root"
          private_key:
            curve: "secp256r1"
            size: 4096
            # X25519 is not supported rigth now by the module
            # type: "X25519"
            type: "RSA"
          path: "/etc/nginx/certs"
          country_name: "CA"
          organization_name: "Home"
          organizational_unit_name: "HM"
          state_or_province_name: "QC"
        certs:
          - name: "localhost"
            common_name: "localhost"
            subject_alt_name: "DNS:localhost"
          - name: "reverseproxy.lan"
            common_name: "reverseproxy.lan"
          - name: "print.lan"
            common_name: "print.lan"
            subject_alt_name: "DNS:print.lan"
          - name: "k3s.lan"
            common_name: "k3s.lan"
            subject_alt_name: "DNS:k3s.lan"

      nginx:
        dns_resolver:
          - "{{ k3s.config.k8s_gateway.loadBalancerIP }}"
          - "1.1.1.2"
          - "1.0.0.2"
        internal_network:
          - name: "all_lan"
            ip_range:
              - "{{ network.zones.home.lans.guest.cidr }}"
              - "{{ network.zones.home.lans.main.cidr }}"
              - "{{ network.zones.home.lans.work.cidr }}"
              - "{{ network.zones.home.lans.k8s.cidr }}"
              - "{{ network.zones.home.lans.lab.cidr }}"
          - name: "guest"
            ip_range:
              - "{{ network.zones.home.lans.guest.cidr }}"
          - name: "main"
            ip_range:
              - "{{ network.zones.home.lans.main.cidr }}"
          - name: "work"
            ip_range:
              - "{{ network.zones.home.lans.work.cidr }}"
          - name: "k8s"
            ip_range:
              - "{{ network.zones.home.lans.k8s.cidr }}"
          - name: "lab"
            ip_range:
              - "{{ network.zones.home.lans.lab.cidr }}"
        config:
          certbot:
            email: "admin@acme.com"
          http:
            ssl_protocols:
              - "TLSv1.3"
            ssl_ciphers:
              - "TLS-AES128-GCM-SHA256"
              - "TLS-AES256-GCM-SHA384"
              - "TLS-CHACHA20-POLY1305-SHA256"
            geo:
              - name: "guest"
                addresses:
                  - ip: "default"
                    return: 0
                  - ip: "{{ network.zones.home.lans.guest.cidr }}"
                    return: 1
              - name: "main"
                addresses:
                  - ip: "default"
                    return: 0
                  - ip: "{{ network.zones.home.lans.main.cidr }}"
                    return: 1
              - name: "work"
                addresses:
                  - ip: "default"
                    return: 0
                  - ip: "{{ network.zones.home.lans.work.cidr }}"
                    return: 1
              - name: "k8s"
                addresses:
                  - ip: "default"
                    return: 0
                  - ip: "{{ network.zones.home.lans.k8s.cidr }}"
                    return: 1
              - name: "lab"
                addresses:
                  - ip: "default"
                    return: 0
                  - ip: "{{ network.zones.home.lans.lab.cidr }}"
                    return: 1
        http:
          services:
            - name: "pihole_guest"
              main_domain_name: "pihole.guest.lan"
              listen: "{{ network.zones.home.hosts.reverseproxy.lab | ansible.netcommon.ipaddr('address') }}"
              to:
                proto: "http"
                address: "pihole.guest.lan"
              ssl:
                type: "manual"
                cert_name: "k3s.lan"

            - name: "pihole_main"
              main_domain_name: "pihole.main.lan"
              listen: "{{ network.zones.home.hosts.reverseproxy.lab | ansible.netcommon.ipaddr('address') }}"
              to:
                proto: "http"
                address: "pihole.main.lan"
              ssl:
                type: "manual"
                cert_name: "k3s.lan"

            - name: "pihole_work"
              main_domain_name: "pihole.work.lan"
              listen: "{{ network.zones.home.hosts.reverseproxy.lab | ansible.netcommon.ipaddr('address') }}"
              to:
                proto: "http"
                address: "pihole.work.lan"
              ssl:
                type: "manual"
                cert_name: "k3s.lan"

            - name: "pihole_lab"
              main_domain_name: "pihole.lab.lan"
              listen: "{{ network.zones.home.hosts.reverseproxy.lab | ansible.netcommon.ipaddr('address') }}"
              to:
                proto: "http"
                address: "pihole.lab.lan"
              ssl:
                type: "manual"
                cert_name: "k3s.lan"

            - name: "vault"
              main_domain_name: "vault.k3s.lan"
              listen: "{{ network.zones.home.hosts.reverseproxy.lab | ansible.netcommon.ipaddr('address') }}"
              to:
                proto: "http"
                address: "vault.k3s.lan"
              ssl:
                type: "manual"
                cert_name: "k3s.lan"

            - name: "grafana"
              main_domain_name: "grafana.k3s.lan"
              listen: "{{ network.zones.home.hosts.reverseproxy.lab | ansible.netcommon.ipaddr('address') }}"
              to:
                proto: "http"
                address: "grafana.k3s.lan"
              ssl:
                type: "manual"
                cert_name: "k3s.lan"

            - name: "cups"
              main_domain_name: "print.lan"
              listen: "{{ network.zones.home.hosts.reverseproxy.lab | ansible.netcommon.ipaddr('address') }}"
              internal_network:
                - "lab"
              ssl:
                type: "manual"
                cert_name: "print.lan"
              proxy_bind:
                proto: "https"
                address: "{{ network.zones.home.hosts.print.lab | ansible.netcommon.ipaddr('address') }}"
                port: "631"
                ssl:
                  hostname: "print"
                  cert_name: "print"
                  self_signed: yes
                  proxy_ssl_protocols:
                    - "TLSv1.3"

        stream:
          udp:
            upstreams:
              - name: "pihole_guest"
                addresses:
                  - address: "192.168.3.32"
                    port: 53
              - name: "pihole_main"
                addresses:
                  - address: "192.168.3.33"
                    port: 53
              - name: "piholework"
                addresses:
                  - address: "192.168.3.34"
                    port: 53
              - name: "pihole_lab"
                addresses:
                  - address: "192.168.3.35"
                    port: 53
            services:
              - port: 53
                listen: "{{ network.zones.home.hosts.reverseproxy.guest | ansible.netcommon.ipaddr('address') }}"
                upstream: "pihole_guest"
              - port: 53
                listen: "{{ network.zones.home.hosts.reverseproxy.main | ansible.netcommon.ipaddr('address') }}"
                upstream: "pihole_main"
              - port: 53
                listen: "{{ network.zones.home.hosts.reverseproxy.work | ansible.netcommon.ipaddr('address') }}"
                upstream: "piholework"
              - port: 53
                listen: "{{ network.zones.home.hosts.reverseproxy.lab | ansible.netcommon.ipaddr('address') }}"
                upstream: "pihole_lab"